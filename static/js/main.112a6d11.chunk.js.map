{"version":3,"sources":["components/Navbar.tsx","components/TodoForm.tsx","components/TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","className","href","TodoForm","props","ref","useRef","type","id","placeholder","onKeyPress","e","key","onAdd","current","value","htmlFor","TodoList","todos","onRemove","onToggle","length","map","todo","classes","completed","push","join","checked","onChange","title","onClick","preventDefault","removeHandler","App","useState","setTodos","newTodo","Date","now","prev","confirm","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"6MAEaA,EAAmB,kBAC5B,8BACI,qBAAKC,UAAU,iCAAf,SACI,mBAAGC,KAAK,IAAID,UAAU,aAAtB,qCCCCE,EAAoC,SAACC,GAE9C,IAAMC,EAAMC,iBAAyB,MASrC,OACI,sBAAKL,UAAU,kBAAf,UACI,uBACII,IAAKA,EACLE,KAAK,OAAOC,GAAG,QACfC,YAAY,aACZC,WAbY,SAACC,GACP,UAAVA,EAAEC,MACFR,EAAMS,MAAMR,EAAIS,QAASC,OACzBV,EAAIS,QAASC,MAAQ,OAWrB,uBAAOC,QAAQ,QAAQf,UAAU,SAAjC,2CCfCgB,EAAoC,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,SAChE,GAAqB,IAAjBF,EAAMG,OAAc,OACpB,mBAAGpB,UAAU,SAAb,6BAQJ,OACI,6BACKiB,EAAMI,KAAI,SAAAC,GACP,IAAIC,EAAU,CAAC,QAGf,OAFGD,EAAKE,WAAWD,EAAQE,KAAK,aAG5B,oBAAIzB,UAAWuB,EAAQG,KAAK,KAA5B,SACI,kCACI,uBAAOpB,KAAK,WACTqB,QAASL,EAAKE,UACdI,SAAU,kBAAMT,EAASG,EAAKf,OACjC,+BAAOe,EAAKO,QACZ,mBAAG7B,UAAU,0BACV8B,QAAS,SAAApB,GAAC,OAnBjB,SAACA,EAAqBH,GACtCG,EAAEqB,iBACFb,EAASX,GAiB4ByB,CAActB,EAAGY,EAAKf,KADvC,wBAN+Be,EAAKf,UCmBjD0B,EAvCO,WAAO,IAAD,EACEC,mBAAkB,IADpB,mBACjBjB,EADiB,KACVkB,EADU,KAwBxB,OACI,qCACI,cAAC,EAAD,IACA,sBAAKnC,UAAU,YAAf,UACE,cAAC,EAAD,CAAUY,MAzBD,SAACiB,GAChB,IAAIO,EAAiB,CACjB7B,GAAI8B,KAAKC,MACTT,QACAL,WAAW,GAEfW,GAAS,SAAAI,GAAI,OAAKH,GAAL,mBAAiBG,UAoBxB,cAAC,EAAD,CACItB,MAAOA,EACPE,SAnBQ,SAACZ,GACnB4B,GAAS,SAAAI,GAAI,OAAIA,EAAKlB,KAAI,SAAAC,GAEtB,OADIA,EAAKf,KAAOA,IAAIe,EAAKE,WAAaF,EAAKE,WACpCF,SAiBDJ,SAdQ,SAACX,GAEDiC,QAAQ,mBACTL,GAAS,SAAAI,GAAI,OAAIA,EAAKE,QAAO,SAAAnB,GAAI,OAAIA,EAAKf,KAAOA,kBCb3DmC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OAAO,cAAC,EAAD,IACdC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.112a6d11.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Navbar: React.FC = () => (\r\n    <nav>\r\n        <div className=\"nav-wrapper teal lighten-2 px1\">\r\n            <a href=\"/\" className=\"brand-logo\">React + TypeScript</a>\r\n        </div>\r\n    </nav>\r\n)","import React, {useRef} from 'react'\r\n\r\ninterface TodoFormProps {\r\n    onAdd(title: string): void\r\n}\r\n\r\nexport const TodoForm: React.FC<TodoFormProps> = (props) => {\r\n\r\n    const ref = useRef<HTMLInputElement>(null)\r\n\r\n    const keyPressHandler = (e: React.KeyboardEvent) => {\r\n        if (e.key === 'Enter') {\r\n            props.onAdd(ref.current!.value)\r\n            ref.current!.value = ''\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"input-field mt3\">\r\n            <input\r\n                ref={ref}\r\n                type=\"text\" id=\"title\"\r\n                placeholder=\"Enter Name\"\r\n                onKeyPress={keyPressHandler}/>\r\n            <label htmlFor=\"title\" className=\"active\">Write something and Enter</label>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {ITodo} from \"../interfaces\";\r\n\r\ntype TodoListProps = {\r\n    todos: ITodo[]\r\n    onToggle(id: number): void\r\n    onRemove: (id: number) => void\r\n}\r\n\r\nexport const TodoList: React.FC<TodoListProps> = ({todos, onRemove, onToggle}) => {\r\n    if (todos.length === 0) return (\r\n        <p className=\"center\">No todo for now</p>\r\n    )\r\n\r\n    let removeHandler = (e: React.MouseEvent, id: number) => {\r\n        e.preventDefault()\r\n        onRemove(id)\r\n    }\r\n\r\n    return (\r\n        <ul>\r\n            {todos.map(todo => {\r\n                let classes = ['todo']\r\n                if(todo.completed) classes.push('completed')\r\n\r\n                return (\r\n                    <li className={classes.join(' ')} key={todo.id}>\r\n                        <label>\r\n                            <input type=\"checkbox\"\r\n                               checked={todo.completed}\r\n                               onChange={() => onToggle(todo.id)}/>\r\n                            <span>{todo.title}</span>\r\n                            <i className=\"material-icons red-text\"\r\n                               onClick={e => removeHandler(e, todo.id)}>delete\r\n                            </i>\r\n                        </label>\r\n                    </li>\r\n                )\r\n            })}\r\n\r\n        </ul>\r\n    );\r\n}\r\n\r\n","import React, {useState} from 'react';\nimport {Navbar} from \"./components/Navbar\";\nimport {TodoForm} from \"./components/TodoForm\";\nimport {TodoList} from \"./components/TodoList\";\nimport {ITodo} from \"./interfaces\";\n\nconst App: React.FC = () => {\n    const [todos, setTodos] = useState<ITodo[]>([])\n\n    const addHandler = (title: string) => {\n        let newTodo: ITodo = {\n            id: Date.now(),\n            title,\n            completed: false\n        }\n        setTodos(prev => [newTodo, ...prev])\n    }\n\n    const toggleHandler = (id: number) => {\n        setTodos(prev => prev.map(todo => {\n            if (todo.id === id) todo.completed = !todo.completed\n            return todo\n        }))\n    }\n    const removeHandler = (id: number) => {\n        // eslint-disable-next-line no-restricted-globals\n        let shoudRemove = confirm('Are you shore?')\n        if (shoudRemove) setTodos(prev => prev.filter(todo => todo.id !== id))\n    }\n\n    return (\n        <>\n            <Navbar/>\n            <div className=\"container\">\n              <TodoForm onAdd={addHandler}/>\n              <TodoList\n                  todos={todos}\n                  onToggle={toggleHandler}\n                  onRemove={removeHandler}\n                  />\n            </div>\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}